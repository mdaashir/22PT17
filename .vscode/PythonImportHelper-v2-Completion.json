[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "compute_codeword",
        "kind": 2,
        "importPath": "CN.codeword_client",
        "description": "CN.codeword_client",
        "peekOfCode": "def compute_codeword(dataword, generator):\n   # Pad dataword with zeros to match length of generator\n   dataword_padded = dataword + '0' * (len(generator) - 1)\n   # Convert dataword to list of integers for easier manipulation\n   dataword_list = list(map(int, dataword_padded))\n   generator_list = list(map(int, generator))\n   # Perform CRC calculation (XOR)\n   for i in range(len(dataword)):\n       if dataword_list[i] == 1:\n           for j in range(len(generator)):",
        "detail": "CN.codeword_client",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "CN.codeword_client",
        "description": "CN.codeword_client",
        "peekOfCode": "def main():\n    # Create a TCP/IP socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # Connect the socket to the server\n    server_address = ('localhost', 12345)\n    print('Connecting to {} port {}'.format(*server_address))\n    client_socket.connect(server_address)\n    try:\n        # Ask user whether to send the data\n        # Get binary dataword and generator from user",
        "detail": "CN.codeword_client",
        "documentation": {}
    },
    {
        "label": "compute_remainder",
        "kind": 2,
        "importPath": "CN.codeword_server",
        "description": "CN.codeword_server",
        "peekOfCode": "def compute_remainder(codeword, generator):\n    # Perform binary XOR addition between codeword and generator\n    remainder = \"\"\n    codeword_list = list(map(int, codeword))\n    generator_list = list(map(int, generator))\n    # Perform CRC calculation (XOR)\n    for i in range(len(codeword)- len(generator) + 1):\n        if codeword_list[i] == 1:\n            for j in range(len(generator)):\n                codeword_list[i + j] ^= generator_list[j]",
        "detail": "CN.codeword_server",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "CN.codeword_server",
        "description": "CN.codeword_server",
        "peekOfCode": "def main():\n    # Create a TCP/IP socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # Bind the socket to the port\n    server_address = ('localhost', 12345)\n    print('Starting up on {} port {}'.format(*server_address))\n    server_socket.bind(server_address)\n    # Listen for incoming connections\n    server_socket.listen(1)\n    while True:",
        "detail": "CN.codeword_server",
        "documentation": {}
    },
    {
        "label": "calculate_parity_bits",
        "kind": 2,
        "importPath": "CN.hamming_code",
        "description": "CN.hamming_code",
        "peekOfCode": "def calculate_parity_bits(m):\n    p = 0\n    while (2 ** p) < m + p + 1:\n        p += 1\n    return p\ndef position_parity_bits(data, p):\n    j = 0\n    k = 1\n    m = len(data)\n    result = ''",
        "detail": "CN.hamming_code",
        "documentation": {}
    },
    {
        "label": "position_parity_bits",
        "kind": 2,
        "importPath": "CN.hamming_code",
        "description": "CN.hamming_code",
        "peekOfCode": "def position_parity_bits(data, p):\n    j = 0\n    k = 1\n    m = len(data)\n    result = ''\n    for i in range(1, m + p + 1):\n        if i == 2 ** j:\n            result += '0'\n            j += 1\n        else:",
        "detail": "CN.hamming_code",
        "documentation": {}
    },
    {
        "label": "calculate_parity_values",
        "kind": 2,
        "importPath": "CN.hamming_code",
        "description": "CN.hamming_code",
        "peekOfCode": "def calculate_parity_values(code, p):\n    n = len(code)\n    for i in range(p):\n        val = 0\n        for j in range(1, n + 1):\n            if j & (2  i) == (2  i):\n                val = val ^ int(code[-j])\n        code = code[:n-(2i)] + str(val) + code[n-(2i)+1:]\n    return code\ndef detect_correct_error(code, p):",
        "detail": "CN.hamming_code",
        "documentation": {}
    },
    {
        "label": "detect_correct_error",
        "kind": 2,
        "importPath": "CN.hamming_code",
        "description": "CN.hamming_code",
        "peekOfCode": "def detect_correct_error(code, p):\n    n = len(code)\n    error_pos = 0\n    for i in range(p):\n        val = 0\n        for j in range(1, n + 1):\n            if j & (2  i) == (2  i):\n                val = val ^ int(code[-j])\n        error_pos += val * (2 ** i)\n    if error_pos:",
        "detail": "CN.hamming_code",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "CN.hamming_code",
        "description": "CN.hamming_code",
        "peekOfCode": "def main():\n    original_data = input(\"Enter the data bits: \")\n    m = len(original_data)\n    p = calculate_parity_bits(m)\n    positioned_data = position_parity_bits(original_data, p)\n    hamming_code = calculate_parity_values(positioned_data, p)\n    print(f\"Hamming Code: {hamming_code}\")\n    received_code = input(\"Enter the received Hamming Code: \")\n    corrected_code = detect_correct_error(received_code, p)\n    print(f\"Corrected Hamming Code: {corrected_code}\")",
        "detail": "CN.hamming_code",
        "documentation": {}
    },
    {
        "label": "handle_session",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def handle_session(player1, player2):\n    global board\n    print(\"correct\")\n    player1['socket'].send(\"You are player1 with token 'X'\".encode())\n    player2['socket'].send(\"You are player2 with token 'O'\".encode())\n    try:\n        while True:\n            send_board(player1, player2)\n            handle_player_turn(player1)\n            if check_winner(player1['token']):",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "handle_player_turn",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def handle_player_turn(player):\n    player['socket'].send(\"Your turn. Enter position (1-9): \".encode())\n    position = int(player['socket'].recv(1024).decode()) - 1\n    if is_valid_move(position):\n        board[position] = player['token']\n    else:\n        player['socket'].send(\"Invalid move. Try again.\\n\".encode())\n        handle_player_turn(player)\ndef send_board(player1, player2):\n    board_str = format_board()",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "send_board",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def send_board(player1, player2):\n    board_str = format_board()\n    player1['socket'].send(board_str.encode())\n    player2['socket'].send(board_str.encode())\ndef format_board():\n    return f\" {board[0]} | {board[1]} | {board[2]}\\n\" \\\n    f\"-----------\\n\" \\\n    f\" {board[3]} | {board[4]} | {board[5]}\\n\" \\\n    f\"-----------\\n\" \\\n    f\" {board[6]} | {board[7]} | {board[8]}\\n\"",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "format_board",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def format_board():\n    return f\" {board[0]} | {board[1]} | {board[2]}\\n\" \\\n    f\"-----------\\n\" \\\n    f\" {board[3]} | {board[4]} | {board[5]}\\n\" \\\n    f\"-----------\\n\" \\\n    f\" {board[6]} | {board[7]} | {board[8]}\\n\"\ndef is_valid_move(position):\n    return 0 <= position <= 8 and board[position] == ''\ndef check_winner(token):\n    winning_combinations = [(0,1,2),(3,4,5),(6,7,8),",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "is_valid_move",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def is_valid_move(position):\n    return 0 <= position <= 8 and board[position] == ''\ndef check_winner(token):\n    winning_combinations = [(0,1,2),(3,4,5),(6,7,8),\n    (0,3,6),(1,4,7),(2,5,8),\n    (0,4,8),(2,4,6)]\n    for combo in winning_combinations:\n        if all(board[i] == token for i in combo):\n            return True\n    return False",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "check_winner",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def check_winner(token):\n    winning_combinations = [(0,1,2),(3,4,5),(6,7,8),\n    (0,3,6),(1,4,7),(2,5,8),\n    (0,4,8),(2,4,6)]\n    for combo in winning_combinations:\n        if all(board[i] == token for i in combo):\n            return True\n    return False\ndef notify_winner(winner, loser):\n    winner['socket'].send(\"Congratulations! You win.\".encode())",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "notify_winner",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def notify_winner(winner, loser):\n    winner['socket'].send(\"Congratulations! You win.\".encode())\n    loser['socket'].send(\"You lose. Better luck next time.\".encode())\n    reset_board()\ndef reset_board():\n    global board\n    board = [''] * 9\nboard = [''] * 9\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('127.0.0.1', 9999))",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "reset_board",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def reset_board():\n    global board\n    board = [''] * 9\nboard = [''] * 9\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('127.0.0.1', 9999))\nserver_socket.listen(8)\nplayers = []\nwhile len(players) < 2:\n    client, addr = server_socket.accept()",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 5,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "board = [''] * 9\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('127.0.0.1', 9999))\nserver_socket.listen(8)\nplayers = []\nwhile len(players) < 2:\n    client, addr = server_socket.accept()\n    print(client)\n    print(f\"Connection established with {addr}\")\n    players.append({'socket': client, 'token': 'X' if len(players) == 1 else 'O'})",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('127.0.0.1', 9999))\nserver_socket.listen(8)\nplayers = []\nwhile len(players) < 2:\n    client, addr = server_socket.accept()\n    print(client)\n    print(f\"Connection established with {addr}\")\n    players.append({'socket': client, 'token': 'X' if len(players) == 1 else 'O'})\n    if len(players) == 2:",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "players",
        "kind": 5,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "players = []\nwhile len(players) < 2:\n    client, addr = server_socket.accept()\n    print(client)\n    print(f\"Connection established with {addr}\")\n    players.append({'socket': client, 'token': 'X' if len(players) == 1 else 'O'})\n    if len(players) == 2:\n        print(players[0])\n        print(players[1])\nthreading.Thread(target=handle_session, args=(players[0], players[1])).start()",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "cost",
        "kind": 2,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "def cost(X, y, w, b):\n    m = len(X)\n    cost = 0\n    for i in range(m):\n        f_wb = w * X[i] + b\n        cost += (f_wb - y[i]) ** 2\n    total_cost = cost / (2 * m)\n    return total_cost\ndef compute_gradient(X, y, w, b):\n    dj_dw = 0",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "compute_gradient",
        "kind": 2,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "def compute_gradient(X, y, w, b):\n    dj_dw = 0\n    dj_db = 0\n    m = len(X)\n    for i in range(m):\n        f_wb = w * X[i] + b\n        dj_dw += (f_wb - y[i]) * X[i]\n        dj_db += f_wb - y[i]\n    dj_dw /= m\n    dj_db /= m",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "gradient_descent",
        "kind": 2,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "def gradient_descent(\n    X, y, w_in, b_in, alpha, num_iters, cost_function, gradient_function\n):\n    j_history = []\n    p_history = []\n    w = w_in\n    b = b_in\n    for i in range(num_iters):\n        dj_dw, dj_db = gradient_function(X, y, w, b)\n        w = w - alpha * dj_dw",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "plot_regression_line",
        "kind": 2,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "def plot_regression_line(X, y, w, b):\n    plt.scatter(X, y, color=\"blue\", label=\"Data points\")\n    y_pred = [w * x + b for x in X]\n    plt.plot(X, y_pred, color=\"red\", label=\"Regression line\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.legend()\n    plt.show()\n# Plot the final regression line\nplot_regression_line(X_test, Y_test, w_final, b_final)",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "kind": 2,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "def mean_squared_error(y_true, y_pred):\n    m = len(y_true)\n    mse = np.sum((y_true - y_pred) ** 2) / m\n    return mse\ndef mean_absolute_error(y_true, y_pred):\n    m = len(y_true)\n    mae = np.sum(np.abs(y_true - y_pred)) / m\n    return mae\ny_pred = [w_final * x + b_final for x in X_test]\nmse = mean_squared_error(Y_test, y_pred)",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "kind": 2,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "def mean_absolute_error(y_true, y_pred):\n    m = len(y_true)\n    mae = np.sum(np.abs(y_true - y_pred)) / m\n    return mae\ny_pred = [w_final * x + b_final for x in X_test]\nmse = mean_squared_error(Y_test, y_pred)\nmae = mean_absolute_error(Y_test, y_pred)\nprint(f\"Mean Squared Error: {mse}\")\nprint(f\"Mean Absolute Error: {mae}\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "df = pd.read_csv(\"content/Salary_dataset.csv\")\ndf.shape[0]\ndf.plot(x=\"YearsExperience\", y=\"Salary\", style=\"o\")\nplt.title(\"Salary vs Experience\")\nplt.xlabel(\"Years of Experience\")\nplt.ylabel(\"Salary\")\nplt.show()\nX = df[\"YearsExperience\"].values.reshape(-1, 1)\nY = df[\"Salary\"].values\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "X = df[\"YearsExperience\"].values.reshape(-1, 1)\nY = df[\"Salary\"].values\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\nlr = LinearRegression()\nlr.fit(X_test, Y_test)\nprint(X_test)\nprint(Y_test)\nprint(lr.score(X_test, Y_test))\nY_pred = lr.predict(X_test)\nplt.scatter(X_test, Y_test, color=\"red\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "Y = df[\"Salary\"].values\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\nlr = LinearRegression()\nlr.fit(X_test, Y_test)\nprint(X_test)\nprint(Y_test)\nprint(lr.score(X_test, Y_test))\nY_pred = lr.predict(X_test)\nplt.scatter(X_test, Y_test, color=\"red\")\nplt.plot(X_test, Y_pred, color=\"blue\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "lr",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "lr = LinearRegression()\nlr.fit(X_test, Y_test)\nprint(X_test)\nprint(Y_test)\nprint(lr.score(X_test, Y_test))\nY_pred = lr.predict(X_test)\nplt.scatter(X_test, Y_test, color=\"red\")\nplt.plot(X_test, Y_pred, color=\"blue\")\nplt.title(\"Salary vs Experience\")\nplt.xlabel(\"Years of Experience\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "Y_pred",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "Y_pred = lr.predict(X_test)\nplt.scatter(X_test, Y_test, color=\"red\")\nplt.plot(X_test, Y_pred, color=\"blue\")\nplt.title(\"Salary vs Experience\")\nplt.xlabel(\"Years of Experience\")\nplt.ylabel(\"Salary\")\ndef cost(X, y, w, b):\n    m = len(X)\n    cost = 0\n    for i in range(m):",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "w_init",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "w_init = 0\nb_init = 0\niterations = 10000\ntmp_alpha = 0.01\nw_final, b_final = gradient_descent(\n    X_test, Y_test, w_init, b_init, tmp_alpha, iterations, cost, compute_gradient\n)\nprint(w_final, b_final)\ndef plot_regression_line(X, y, w, b):\n    plt.scatter(X, y, color=\"blue\", label=\"Data points\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "b_init",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "b_init = 0\niterations = 10000\ntmp_alpha = 0.01\nw_final, b_final = gradient_descent(\n    X_test, Y_test, w_init, b_init, tmp_alpha, iterations, cost, compute_gradient\n)\nprint(w_final, b_final)\ndef plot_regression_line(X, y, w, b):\n    plt.scatter(X, y, color=\"blue\", label=\"Data points\")\n    y_pred = [w * x + b for x in X]",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "iterations",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "iterations = 10000\ntmp_alpha = 0.01\nw_final, b_final = gradient_descent(\n    X_test, Y_test, w_init, b_init, tmp_alpha, iterations, cost, compute_gradient\n)\nprint(w_final, b_final)\ndef plot_regression_line(X, y, w, b):\n    plt.scatter(X, y, color=\"blue\", label=\"Data points\")\n    y_pred = [w * x + b for x in X]\n    plt.plot(X, y_pred, color=\"red\", label=\"Regression line\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "tmp_alpha",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "tmp_alpha = 0.01\nw_final, b_final = gradient_descent(\n    X_test, Y_test, w_init, b_init, tmp_alpha, iterations, cost, compute_gradient\n)\nprint(w_final, b_final)\ndef plot_regression_line(X, y, w, b):\n    plt.scatter(X, y, color=\"blue\", label=\"Data points\")\n    y_pred = [w * x + b for x in X]\n    plt.plot(X, y_pred, color=\"red\", label=\"Regression line\")\n    plt.xlabel(\"X\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "y_pred = [w_final * x + b_final for x in X_test]\nmse = mean_squared_error(Y_test, y_pred)\nmae = mean_absolute_error(Y_test, y_pred)\nprint(f\"Mean Squared Error: {mse}\")\nprint(f\"Mean Absolute Error: {mae}\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "mse",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "mse = mean_squared_error(Y_test, y_pred)\nmae = mean_absolute_error(Y_test, y_pred)\nprint(f\"Mean Squared Error: {mse}\")\nprint(f\"Mean Absolute Error: {mae}\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "mae",
        "kind": 5,
        "importPath": "ML.ML_task_1",
        "description": "ML.ML_task_1",
        "peekOfCode": "mae = mean_absolute_error(Y_test, y_pred)\nprint(f\"Mean Squared Error: {mse}\")\nprint(f\"Mean Absolute Error: {mae}\")",
        "detail": "ML.ML_task_1",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 6,
        "importPath": "PYTHON.temp",
        "description": "PYTHON.temp",
        "peekOfCode": "class student:\n    def __init__(self):\n        print('hello')\ns=student()",
        "detail": "PYTHON.temp",
        "documentation": {}
    }
]