[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "handle_session",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def handle_session(player1, player2):\n    global board\n    print(\"correct\")\n    player1['socket'].send(\"You are player1 with token 'X'\".encode())\n    player2['socket'].send(\"You are player2 with token 'O'\".encode())\n    try:\n        while True:\n            send_board(player1, player2)\n            handle_player_turn(player1)\n            if check_winner(player1['token']):",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "handle_player_turn",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def handle_player_turn(player):\n    player['socket'].send(\"Your turn. Enter position (1-9): \".encode())\n    position = int(player['socket'].recv(1024).decode()) - 1\n    if is_valid_move(position):\n        board[position] = player['token']\n    else:\n        player['socket'].send(\"Invalid move. Try again.\\n\".encode())\n        handle_player_turn(player)\ndef send_board(player1, player2):\n    board_str = format_board()",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "send_board",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def send_board(player1, player2):\n    board_str = format_board()\n    player1['socket'].send(board_str.encode())\n    player2['socket'].send(board_str.encode())\ndef format_board():\n    return f\" {board[0]} | {board[1]} | {board[2]}\\n\" \\\n    f\"-----------\\n\" \\\n    f\" {board[3]} | {board[4]} | {board[5]}\\n\" \\\n    f\"-----------\\n\" \\\n    f\" {board[6]} | {board[7]} | {board[8]}\\n\"",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "format_board",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def format_board():\n    return f\" {board[0]} | {board[1]} | {board[2]}\\n\" \\\n    f\"-----------\\n\" \\\n    f\" {board[3]} | {board[4]} | {board[5]}\\n\" \\\n    f\"-----------\\n\" \\\n    f\" {board[6]} | {board[7]} | {board[8]}\\n\"\ndef is_valid_move(position):\n    return 0 <= position <= 8 and board[position] == ''\ndef check_winner(token):\n    winning_combinations = [(0,1,2),(3,4,5),(6,7,8),",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "is_valid_move",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def is_valid_move(position):\n    return 0 <= position <= 8 and board[position] == ''\ndef check_winner(token):\n    winning_combinations = [(0,1,2),(3,4,5),(6,7,8),\n    (0,3,6),(1,4,7),(2,5,8),\n    (0,4,8),(2,4,6)]\n    for combo in winning_combinations:\n        if all(board[i] == token for i in combo):\n            return True\n    return False",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "check_winner",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def check_winner(token):\n    winning_combinations = [(0,1,2),(3,4,5),(6,7,8),\n    (0,3,6),(1,4,7),(2,5,8),\n    (0,4,8),(2,4,6)]\n    for combo in winning_combinations:\n        if all(board[i] == token for i in combo):\n            return True\n    return False\ndef notify_winner(winner, loser):\n    winner['socket'].send(\"Congratulations! You win.\".encode())",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "notify_winner",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def notify_winner(winner, loser):\n    winner['socket'].send(\"Congratulations! You win.\".encode())\n    loser['socket'].send(\"You lose. Better luck next time.\".encode())\n    reset_board()\ndef reset_board():\n    global board\n    board = [''] * 9\nboard = [''] * 9\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('127.0.0.1', 9999))",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "reset_board",
        "kind": 2,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "def reset_board():\n    global board\n    board = [''] * 9\nboard = [''] * 9\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('127.0.0.1', 9999))\nserver_socket.listen(8)\nplayers = []\nwhile len(players) < 2:\n    client, addr = server_socket.accept()",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 5,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "board = [''] * 9\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('127.0.0.1', 9999))\nserver_socket.listen(8)\nplayers = []\nwhile len(players) < 2:\n    client, addr = server_socket.accept()\n    print(client)\n    print(f\"Connection established with {addr}\")\n    players.append({'socket': client, 'token': 'X' if len(players) == 1 else 'O'})",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('127.0.0.1', 9999))\nserver_socket.listen(8)\nplayers = []\nwhile len(players) < 2:\n    client, addr = server_socket.accept()\n    print(client)\n    print(f\"Connection established with {addr}\")\n    players.append({'socket': client, 'token': 'X' if len(players) == 1 else 'O'})\n    if len(players) == 2:",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "players",
        "kind": 5,
        "importPath": "CN.server",
        "description": "CN.server",
        "peekOfCode": "players = []\nwhile len(players) < 2:\n    client, addr = server_socket.accept()\n    print(client)\n    print(f\"Connection established with {addr}\")\n    players.append({'socket': client, 'token': 'X' if len(players) == 1 else 'O'})\n    if len(players) == 2:\n        print(players[0])\n        print(players[1])\nthreading.Thread(target=handle_session, args=(players[0], players[1])).start()",
        "detail": "CN.server",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 6,
        "importPath": "PYTHON.temp",
        "description": "PYTHON.temp",
        "peekOfCode": "class student:\n    def __init__(self):\n        print('hello')\ns=student()",
        "detail": "PYTHON.temp",
        "documentation": {}
    }
]